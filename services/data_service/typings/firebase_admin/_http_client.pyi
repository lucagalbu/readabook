"""
This type stub file was generated by pyright.
"""

from requests.packages.urllib3.util import retry

"""Internal HTTP client module.

 This module provides utilities for making HTTP calls using the requests library.
 """
if hasattr(retry.Retry.DEFAULT, "allowed_methods"):
    _ANY_METHOD = ...
else:
    _ANY_METHOD = ...
DEFAULT_RETRY_CONFIG = ...
DEFAULT_TIMEOUT_SECONDS = ...

class HttpClient:
    """Base HTTP client used to make HTTP calls.

    HttpClient maintains an HTTP session, and handles request authentication and retries if
    necessary.
    """

    def __init__(
        self,
        credential=...,
        session=...,
        base_url=...,
        headers=...,
        retries=...,
        timeout=...,
    ) -> None:
        """Creates a new HttpClient instance from the provided arguments.

        If a credential is provided, initializes a new HTTP session authorized with it. If neither
        a credential nor a session is provided, initializes a new unauthorized session.

        Args:
          credential: A Google credential that can be used to authenticate requests (optional).
          session: A custom HTTP session (optional).
          base_url: A URL prefix to be added to all outgoing requests (optional).
          headers: A map of headers to be added to all outgoing requests (optional).
          retries: A urllib retry configuration. Default settings would retry once for low-level
              connection and socket read errors, and up to 4 times for HTTP 500 and 503 errors.
              Pass a False value to disable retries (optional).
          timeout: HTTP timeout in seconds. Defaults to 120 seconds when not specified. Set to
              None to disable timeouts (optional).
        """
        ...
    @property
    def session(self): ...
    @property
    def base_url(self): ...
    @property
    def timeout(self): ...
    def parse_body(self, resp): ...
    def request(self, method, url, **kwargs):  # -> Response:
        """Makes an HTTP call using the Python requests library.

        This is the sole entry point to the requests library. All other helper methods in this
        class call this method to send HTTP requests out. Refer to
        http://docs.python-requests.org/en/master/api/ for more information on supported options
        and features.

        Args:
          method: HTTP method name as a string (e.g. get, post).
          url: URL of the remote endpoint.
          kwargs: An additional set of keyword arguments to be passed into the requests API
              (e.g. json, params, timeout).

        Returns:
          Response: An HTTP response object.

        Raises:
          RequestException: Any requests exceptions encountered while making the HTTP call.
        """
        ...
    def headers(self, method, url, **kwargs): ...
    def body_and_response(self, method, url, **kwargs): ...
    def body(self, method, url, **kwargs): ...
    def headers_and_body(self, method, url, **kwargs): ...
    def close(self): ...

class JsonHttpClient(HttpClient):
    """An HTTP client that parses response messages as JSON."""

    def __init__(self, **kwargs) -> None: ...
    def parse_body(self, resp): ...
