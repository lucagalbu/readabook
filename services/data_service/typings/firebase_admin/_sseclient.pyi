"""
This type stub file was generated by pyright.
"""

import requests
from google.auth import transport

"""SSEClient module to stream realtime updates from the Firebase Database.

Based on a similar implementation from Pyrebase.
"""
end_of_field = ...

class KeepAuthSession(transport.requests.AuthorizedSession):
    """A session that does not drop authentication on redirects between domains."""

    def __init__(self, credential) -> None: ...
    def rebuild_auth(self, prepared_request, response): ...

class _EventBuffer:
    """A helper class for buffering and parsing raw SSE data."""

    def __init__(self) -> None: ...
    def append(self, char): ...
    def truncate(self): ...
    @property
    def is_end_of_field(self): ...
    @property
    def buffer_string(self): ...

class SSEClient:
    """SSE client implementation."""

    def __init__(self, url, session, retry=..., **kwargs) -> None:
        """Initializes the SSEClient.

        Args:
          url: The remote url to connect to.
          session: The requests session.
          retry: The retry interval in milliseconds (optional).
          **kwargs: Extra kwargs that will be sent to ``requests.get()`` (optional).
        """
        ...
    def close(self):  # -> None:
        """Closes the SSEClient instance."""
        ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...

class Event:
    """Event represents the events fired by SSE."""

    sse_line_pattern = ...
    def __init__(self, data=..., event_type=..., event_id=..., retry=...) -> None: ...
    @classmethod
    def parse(cls, raw):
        """Given a possibly-multiline string representing an SSE message, parses it
        and returns an Event object.

        Args:
          raw: the raw data to parse.

        Returns:
          Event: A new ``Event`` with the parameters initialized.
        """
        ...
