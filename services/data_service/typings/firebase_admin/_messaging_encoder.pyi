"""
This type stub file was generated by pyright.
"""

import json

"""Encoding and validation utils for the messaging (FCM) module."""

class Message:
    """A message that can be sent via Firebase Cloud Messaging.

    Contains payload information as well as recipient information. In particular, the message must
    contain exactly one of token, topic or condition fields.

    Args:
        data: A dictionary of data fields (optional). All keys and values in the dictionary must be
            strings.
        notification: An instance of ``messaging.Notification`` (optional).
        android: An instance of ``messaging.AndroidConfig`` (optional).
        webpush: An instance of ``messaging.WebpushConfig`` (optional).
        apns: An instance of ``messaging.ApnsConfig`` (optional).
        fcm_options: An instance of ``messaging.FCMOptions`` (optional).
        token: The registration token of the device to which the message should be sent (optional).
        topic: Name of the FCM topic to which the message should be sent (optional). Topic name
            may contain the ``/topics/`` prefix.
        condition: The FCM condition to which the message should be sent (optional).
    """

    def __init__(
        self,
        data=...,
        notification=...,
        android=...,
        webpush=...,
        apns=...,
        fcm_options=...,
        token=...,
        topic=...,
        condition=...,
    ) -> None: ...
    def __str__(self) -> str: ...

class MulticastMessage:
    """A message that can be sent to multiple tokens via Firebase Cloud Messaging.

    Args:
        tokens: A list of registration tokens of targeted devices.
        data: A dictionary of data fields (optional). All keys and values in the dictionary must be
            strings.
        notification: An instance of ``messaging.Notification`` (optional).
        android: An instance of ``messaging.AndroidConfig`` (optional).
        webpush: An instance of ``messaging.WebpushConfig`` (optional).
        apns: An instance of ``messaging.ApnsConfig`` (optional).
        fcm_options: An instance of ``messaging.FCMOptions`` (optional).
    """

    def __init__(
        self,
        tokens,
        data=...,
        notification=...,
        android=...,
        webpush=...,
        apns=...,
        fcm_options=...,
    ) -> None: ...

class _Validators:
    """A collection of data validation utilities.

    Methods provided in this class raise ``ValueErrors`` if any validations fail.
    """

    @classmethod
    def check_string(cls, label, value, non_empty=...):  # -> str | None:
        """Checks if the given value is a string."""
        ...
    @classmethod
    def check_number(cls, label, value): ...
    @classmethod
    def check_string_dict(cls, label, value):  # -> dict[Unknown, Unknown] | None:
        """Checks if the given value is a dictionary comprised only of string keys and values."""
        ...
    @classmethod
    def check_string_list(cls, label, value):  # -> list[Unknown] | None:
        """Checks if the given value is a list comprised only of strings."""
        ...
    @classmethod
    def check_number_list(cls, label, value):  # -> list[Unknown] | None:
        """Checks if the given value is a list comprised only of numbers."""
        ...
    @classmethod
    def check_analytics_label(cls, label, value):  # -> str | None:
        """Checks if the given value is a valid analytics label."""
        ...
    @classmethod
    def check_datetime(cls, label, value):  # -> datetime | None:
        """Checks if the given value is a datetime."""
        ...

class MessageEncoder(json.JSONEncoder):
    """A custom ``JSONEncoder`` implementation for serializing Message instances into JSON."""

    @classmethod
    def remove_null_values(cls, dict_value): ...
    @classmethod
    def encode_android(
        cls, android
    ):  # -> dict[str, str | dict[Unknown, Unknown] | Unknown | dict[str, str | None] | None] | None:
        """Encodes an ``AndroidConfig`` instance into JSON."""
        ...
    @classmethod
    def encode_android_fcm_options(
        cls, fcm_options
    ):  # -> dict[str, str | None] | None:
        """Encodes an ``AndroidFCMOptions`` instance into JSON."""
        ...
    @classmethod
    def encode_ttl(cls, ttl):  # -> str | None:
        """Encodes an ``AndroidConfig`` ``TTL`` duration into a string."""
        ...
    @classmethod
    def encode_milliseconds(cls, label, msec):  # -> str | None:
        """Encodes a duration in milliseconds into a string."""
        ...
    @classmethod
    def encode_android_notification(cls, notification):
        """Encodes an ``AndroidNotification`` instance into JSON."""
        ...
    @classmethod
    def encode_light_settings(cls, light_settings):  # -> dict[str, str | None] | None:
        """Encodes a ``LightSettings`` instance into JSON."""
        ...
    @classmethod
    def encode_webpush(
        cls, webpush
    ):  # -> dict[str, dict[Unknown, Unknown] | dict[str, str | Unknown | Number | list[Unknown] | None] | dict[str, str | None] | None] | None:
        """Encodes a ``WebpushConfig`` instance into JSON."""
        ...
    @classmethod
    def encode_webpush_notification(
        cls, notification
    ):  # -> dict[str, str | Unknown | Number | list[Unknown] | None] | None:
        """Encodes a ``WebpushNotification`` instance into JSON."""
        ...
    @classmethod
    def encode_webpush_notification_actions(cls, actions):  # -> list[Unknown] | None:
        """Encodes a list of ``WebpushNotificationActions`` into JSON."""
        ...
    @classmethod
    def encode_webpush_fcm_options(cls, options):  # -> dict[str, str | None] | None:
        """Encodes a ``WebpushFCMOptions`` instance into JSON."""
        ...
    @classmethod
    def encode_apns(
        cls, apns
    ):  # -> dict[str, dict[Unknown, Unknown] | dict[str, dict[str, str | dict[str, str | list[Unknown] | None] | Number | dict[str, str | Number | None] | None]] | dict[str, str | None] | None] | None:
        """Encodes an ``APNSConfig`` instance into JSON."""
        ...
    @classmethod
    def encode_apns_payload(
        cls, payload
    ):  # -> dict[str, dict[str, str | dict[str, str | list[Unknown] | None] | Number | dict[str, str | Number | None] | None]] | None:
        """Encodes an ``APNSPayload`` instance into JSON."""
        ...
    @classmethod
    def encode_apns_fcm_options(cls, fcm_options):  # -> dict[str, str | None] | None:
        """Encodes an ``APNSFCMOptions`` instance into JSON."""
        ...
    @classmethod
    def encode_aps(
        cls, aps
    ):  # -> dict[str, str | dict[str, str | list[Unknown] | None] | Number | dict[str, str | Number | None] | None]:
        """Encodes an ``Aps`` instance into JSON."""
        ...
    @classmethod
    def encode_aps_sound(cls, sound):  # -> str | dict[str, str | Number | None] | None:
        """Encodes an APNs sound configuration into JSON."""
        ...
    @classmethod
    def encode_aps_alert(
        cls, alert
    ):  # -> str | dict[str, str | list[Unknown] | None] | None:
        """Encodes an ``ApsAlert`` instance into JSON."""
        ...
    @classmethod
    def encode_notification(cls, notification):  # -> dict[str, str | None] | None:
        """Encodes a ``Notification`` instance into JSON."""
        ...
    @classmethod
    def sanitize_topic_name(cls, topic):  # -> None:
        """Removes the /topics/ prefix from the topic name, if present."""
        ...
    def default(self, o): ...
    @classmethod
    def encode_fcm_options(cls, fcm_options):  # -> dict[str, str | None] | None:
        """Encodes an ``FCMOptions`` instance into JSON."""
        ...
