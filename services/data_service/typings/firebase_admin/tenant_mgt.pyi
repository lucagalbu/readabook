"""
This type stub file was generated by pyright.
"""

"""Firebase tenant management module.

This module contains functions for creating and configuring authentication tenants within a
Google Cloud Identity Platform (GCIP) instance.
"""
_TENANT_MGT_ATTRIBUTE = ...
_MAX_LIST_TENANTS_RESULTS = ...
_DISPLAY_NAME_PATTERN = ...
__all__ = [
    "ListTenantsPage",
    "Tenant",
    "TenantIdMismatchError",
    "TenantNotFoundError",
    "auth_for_tenant",
    "create_tenant",
    "delete_tenant",
    "get_tenant",
    "list_tenants",
    "update_tenant",
]
TenantIdMismatchError = ...
TenantNotFoundError = ...

def auth_for_tenant(tenant_id, app=...):
    """Gets an Auth Client instance scoped to the given tenant ID.

    Args:
        tenant_id: A tenant ID string.
        app: An App instance (optional).

    Returns:
        auth.Client: An ``auth.Client`` object.

    Raises:
        ValueError: If the tenant ID is None, empty or not a string.
    """
    ...

def get_tenant(tenant_id, app=...):
    """Gets the tenant corresponding to the given ``tenant_id``.

    Args:
        tenant_id: A tenant ID string.
        app: An App instance (optional).

    Returns:
        Tenant: A tenant object.

    Raises:
        ValueError: If the tenant ID is None, empty or not a string.
        TenantNotFoundError: If no tenant exists by the given ID.
        FirebaseError: If an error occurs while retrieving the tenant.
    """
    ...

def create_tenant(
    display_name, allow_password_sign_up=..., enable_email_link_sign_in=..., app=...
):
    """Creates a new tenant from the given options.

    Args:
        display_name: Display name string for the new tenant. Must begin with a letter and contain
            only letters, digits and hyphens. Length must be between 4 and 20.
        allow_password_sign_up: A boolean indicating whether to enable or disable the email sign-in
            provider (optional).
        enable_email_link_sign_in: A boolean indicating whether to enable or disable email link
            sign-in (optional). Disabling this makes the password required for email sign-in.
        app: An App instance (optional).

    Returns:
        Tenant: A tenant object.

    Raises:
        ValueError: If any of the given arguments are invalid.
        FirebaseError: If an error occurs while creating the tenant.
    """
    ...

def update_tenant(
    tenant_id,
    display_name=...,
    allow_password_sign_up=...,
    enable_email_link_sign_in=...,
    app=...,
):
    """Updates an existing tenant with the given options.

    Args:
        tenant_id: ID of the tenant to update.
        display_name: Updated display name string for the tenant (optional).
        allow_password_sign_up: A boolean indicating whether to enable or disable the email sign-in
            provider.
        enable_email_link_sign_in: A boolean indicating whether to enable or disable email link
            sign-in. Disabling this makes the password required for email sign-in.
        app: An App instance (optional).

    Returns:
        Tenant: The updated tenant object.

    Raises:
        ValueError: If any of the given arguments are invalid.
        TenantNotFoundError: If no tenant exists by the given ID.
        FirebaseError: If an error occurs while creating the tenant.
    """
    ...

def delete_tenant(tenant_id, app=...):  # -> None:
    """Deletes the tenant corresponding to the given ``tenant_id``.

    Args:
        tenant_id: A tenant ID string.
        app: An App instance (optional).

    Raises:
        ValueError: If the tenant ID is None, empty or not a string.
        TenantNotFoundError: If no tenant exists by the given ID.
        FirebaseError: If an error occurs while retrieving the tenant.
    """
    ...

def list_tenants(page_token=..., max_results=..., app=...):  # -> ListTenantsPage:
    """Retrieves a page of tenants from a Firebase project.

    The ``page_token`` argument governs the starting point of the page. The ``max_results``
    argument governs the maximum number of tenants that may be included in the returned page.
    This function never returns None. If there are no user accounts in the Firebase project, this
    returns an empty page.

    Args:
        page_token: A non-empty page token string, which indicates the starting point of the page
            (optional). Defaults to ``None``, which will retrieve the first page of users.
        max_results: A positive integer indicating the maximum number of users to include in the
            returned page (optional). Defaults to 100, which is also the maximum number allowed.
        app: An App instance (optional).

    Returns:
        ListTenantsPage: A page of tenants.

    Raises:
        ValueError: If ``max_results`` or ``page_token`` are invalid.
        FirebaseError: If an error occurs while retrieving the user accounts.
    """
    ...

class Tenant:
    """Represents a tenant in a multi-tenant application.

    Multi-tenancy support requires Google Cloud Identity Platform (GCIP). To learn more about
    GCIP including pricing and features, see https://cloud.google.com/identity-platform.

    Before multi-tenancy can be used in a Google Cloud Identity Platform project, tenants must be
    enabled in that project via the Cloud Console UI. A Tenant instance provides information
    such as the display name, tenant identifier and email authentication configuration.
    """

    def __init__(self, data) -> None: ...
    @property
    def tenant_id(self): ...
    @property
    def display_name(self): ...
    @property
    def allow_password_sign_up(self): ...
    @property
    def enable_email_link_sign_in(self): ...

class _TenantManagementService:
    """Firebase tenant management service."""

    TENANT_MGT_URL = ...
    def __init__(self, app) -> None: ...
    def auth_for_tenant(self, tenant_id):
        """Gets an Auth Client instance scoped to the given tenant ID."""
        ...
    def get_tenant(self, tenant_id):  # -> Tenant:
        """Gets the tenant corresponding to the given ``tenant_id``."""
        ...
    def create_tenant(
        self, display_name, allow_password_sign_up=..., enable_email_link_sign_in=...
    ):  # -> Tenant:
        """Creates a new tenant from the given parameters."""
        ...
    def update_tenant(
        self,
        tenant_id,
        display_name=...,
        allow_password_sign_up=...,
        enable_email_link_sign_in=...,
    ):
        """Updates the specified tenant with the given parameters."""
        ...
    def delete_tenant(self, tenant_id):  # -> None:
        """Deletes the tenant corresponding to the given ``tenant_id``."""
        ...
    def list_tenants(self, page_token=..., max_results=...):
        """Retrieves a batch of tenants."""
        ...

class ListTenantsPage:
    """Represents a page of tenants fetched from a Firebase project.

    Provides methods for traversing tenants included in this page, as well as retrieving
    subsequent pages of tenants. The iterator returned by ``iterate_all()`` can be used to iterate
    through all tenants in the Firebase project starting from this page.
    """

    def __init__(self, download, page_token, max_results) -> None: ...
    @property
    def tenants(self):  # -> list[Tenant]:
        """A list of ``ExportedUserRecord`` instances available in this page."""
        ...
    @property
    def next_page_token(self):
        """Page token string for the next page (empty string indicates no more pages)."""
        ...
    @property
    def has_next_page(self):  # -> bool:
        """A boolean indicating whether more pages are available."""
        ...
    def get_next_page(self):  # -> ListTenantsPage | None:
        """Retrieves the next page of tenants, if available.

        Returns:
            ListTenantsPage: Next page of tenants, or None if this is the last page.
        """
        ...
    def iterate_all(self):  # -> _TenantIterator:
        """Retrieves an iterator for tenants.

        Returned iterator will iterate through all the tenants in the Firebase project
        starting from this page. The iterator will never buffer more than one page of tenants
        in memory at a time.

        Returns:
            iterator: An iterator of Tenant instances.
        """
        ...

class _TenantIterator:
    """An iterator that allows iterating over tenants.

    This implementation loads a page of tenants into memory, and iterates on them. When the whole
    page has been traversed, it loads another page. This class never keeps more than one page
    of entries in memory.
    """

    def __init__(self, current_page) -> None: ...
    def next(self): ...
    def __next__(self): ...
    def __iter__(self): ...
