"""
This type stub file was generated by pyright.
"""

import datetime
import json
import os
import threading
from typing import Optional
from firebase_admin.__about__ import __version__
from google.auth.credentials import Credentials

"""Firebase Admin SDK for Python."""
_apps = ...
_apps_lock = threading.RLock()
_clock = ...
_DEFAULT_APP_NAME = ...
_FIREBASE_CONFIG_ENV_VAR = ...
_CONFIG_VALID_KEYS = ...

def initialize_app(
    credential: Optional[Credentials] = ...,
    options: Optional[dict[str, str]] = ...,
    name: Optional[str] = ...,
) -> App:
    """Initializes and returns a new App instance.

    Creates a new App instance using the specified options
    and the app name. If an instance already exists by the same
    app name a ValueError is raised.
    If options are not provided an attempt is made to load the options from the environment.
    This is done by looking up the ``FIREBASE_CONFIG`` environment variable. If the value of
    the variable starts with ``"{"``, it is parsed as a JSON object. Otherwise it is treated
    as a file name and the JSON content is read from the corresponding file.
    Use this function whenever a new App instance is required. Do not directly invoke the
    App constructor.

    Args:
      credential: A credential object used to initialize the SDK (optional). If none is provided,
          Google Application Default Credentials are used.
      options: A dictionary of configuration options (optional). Supported options include
          ``databaseURL``, ``storageBucket``, ``projectId``, ``databaseAuthVariableOverride``,
          ``serviceAccountId`` and ``httpTimeout``. If ``httpTimeout`` is not set, the SDK
          uses a default timeout of 120 seconds.
      name: Name of the app (optional).
    Returns:
      App: A newly initialized instance of App.

    Raises:
      ValueError: If the app name is already in use, or any of the
          provided arguments are invalid.
    """
    ...

def delete_app(app):  # -> None:
    """Gracefully deletes an App instance.

    Args:
      app: The app instance to be deleted.

    Raises:
      ValueError: If the app is not initialized.
    """
    ...

def get_app(name=...):
    """Retrieves an App instance by name.

    Args:
      name: Name of the App instance to retrieve (optional).

    Returns:
      App: An App instance with the given name.

    Raises:
      ValueError: If the specified name is not a string, or if the specified
          app does not exist.
    """
    ...

class _AppOptions:
    """A collection of configuration options for an App."""

    def __init__(self, options) -> None: ...
    def get(self, key, default=...):  # -> Any:
        """Returns the option identified by the provided key."""
        ...

class App:
    """The entry point for Firebase Python SDK.

    Represents a Firebase app, while holding the configuration and state
    common to all Firebase APIs.
    """

    def __init__(self, name, credential, options) -> None:
        """Constructs a new App using the provided name and options.

        Args:
          name: Name of the application.
          credential: A credential object.
          options: A dictionary of configuration options.

        Raises:
          ValueError: If an argument is None or invalid.
        """
        ...
    @property
    def name(self): ...
    @property
    def credential(self): ...
    @property
    def options(self): ...
    @property
    def project_id(self): ...
