"""
This type stub file was generated by pyright.
"""

"""Firebase ML module.

This module contains functions for creating, updating, getting, listing,
deleting, publishing and unpublishing Firebase ML models.
"""
_ML_ATTRIBUTE = ...
_MAX_PAGE_SIZE = ...
_MODEL_ID_PATTERN = ...
_DISPLAY_NAME_PATTERN = ...
_TAG_PATTERN = ...
_GCS_TFLITE_URI_PATTERN = ...
_AUTO_ML_MODEL_PATTERN = ...
_RESOURCE_NAME_PATTERN = ...
_OPERATION_NAME_PATTERN = ...

def create_model(model, app=...):  # -> Model:
    """Creates a model in the current Firebase project.

    Args:
        model: An ml.Model to create.
        app: A Firebase app instance (or None to use the default app).

    Returns:
        Model: The model that was created in Firebase ML.
    """
    ...

def update_model(model, app=...):  # -> Model:
    """Updates a model's metadata or model file.

    Args:
        model: The ml.Model to update.
        app: A Firebase app instance (or None to use the default app).

    Returns:
        Model: The updated model.
    """
    ...

def publish_model(model_id, app=...):  # -> Model:
    """Publishes a Firebase ML model.

    A published model can be downloaded to client apps.

    Args:
        model_id: The id of the model to publish.
        app: A Firebase app instance (or None to use the default app).

    Returns:
        Model: The published model.
    """
    ...

def unpublish_model(model_id, app=...):  # -> Model:
    """Unpublishes a Firebase ML model.

    Args:
        model_id: The id of the model to unpublish.
        app: A Firebase app instance (or None to use the default app).

    Returns:
        Model: The unpublished model.
    """
    ...

def get_model(model_id, app=...):  # -> Model:
    """Gets the model specified by the given ID.

    Args:
        model_id: The id of the model to get.
        app: A Firebase app instance (or None to use the default app).

    Returns:
     Model: The requested model.
    """
    ...

def list_models(
    list_filter=..., page_size=..., page_token=..., app=...
):  # -> ListModelsPage:
    """Lists the current project's models.

    Args:
        list_filter: a list filter string such as ``tags:'tag_1'``. None will return all models.
        page_size: A number between 1 and 100 inclusive that specifies the maximum
            number of models to return per page. None for default.
        page_token: A next page token returned from a previous page of results. None
            for first page of results.
        app: A Firebase app instance (or None to use the default app).

    Returns:
        ListModelsPage: A (filtered) list of models.
    """
    ...

def delete_model(model_id, app=...):  # -> None:
    """Deletes a model from the current project.

    Args:
        model_id: The id of the model you wish to delete.
        app: A Firebase app instance (or None to use the default app).
    """
    ...

class Model:
    """A Firebase ML Model object.

    Args:
        display_name: The display name of your model - used to identify your model in code.
        tags: Optional list of strings associated with your model. Can be used in list queries.
        model_format: A subclass of ModelFormat. (e.g. TFLiteFormat) Specifies the model details.
    """

    def __init__(self, display_name=..., tags=..., model_format=...) -> None: ...
    @classmethod
    def from_dict(cls, data, app=...):  # -> Model:
        """Create an instance of the object from a dict."""
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    @property
    def model_id(self):  # -> str | Any | None:
        """The model's ID, unique to the project."""
        ...
    @property
    def display_name(self):  # -> None:
        """The model's display name, used to refer to the model in code and in
        the Firebase console."""
        ...
    @display_name.setter
    def display_name(self, display_name): ...
    @property
    def create_time(self):  # -> int | None:
        """The time the model was created."""
        ...
    @property
    def update_time(self):  # -> int | None:
        """The time the model was last updated."""
        ...
    @property
    def validation_error(self):  # -> Any | None:
        """Validation error message."""
        ...
    @property
    def published(self):  # -> bool:
        """True if the model is published and available for clients to
        download."""
        ...
    @property
    def etag(self):  # -> None:
        """The entity tag (ETag) of the model resource."""
        ...
    @property
    def model_hash(self):  # -> None:
        """SHA256 hash of the model binary."""
        ...
    @property
    def tags(self):  # -> None:
        """Tag strings, used for filtering query results."""
        ...
    @tags.setter
    def tags(self, tags): ...
    @property
    def locked(self):  # -> bool:
        """True if the Model object is locked by an active operation."""
        ...
    def wait_for_unlocked(self, max_time_seconds=...):  # -> None:
        """Waits for the model to be unlocked. (All active operations complete)

        Args:
            max_time_seconds: The maximum number of seconds to wait for the model to unlock.
                (None for no limit)

        Raises:
            exceptions.DeadlineExceeded: If max_time_seconds passed and the model is still locked.
        """
        ...
    @property
    def model_format(self):  # -> None:
        """The model's ``ModelFormat`` object, which represents the model's
        format and storage location."""
        ...
    @model_format.setter
    def model_format(self, model_format): ...
    def as_dict(self, for_upload=...):  # -> dict[Unknown, Unknown]:
        """Returns a serializable representation of the object."""
        ...

class ModelFormat:
    """Abstract base class representing a Model Format such as TFLite."""

    def as_dict(self, for_upload=...):
        """Returns a serializable representation of the object."""
        ...

class TFLiteFormat(ModelFormat):
    """Model format representing a TFLite model.

    Args:
        model_source: A TFLiteModelSource sub class. Specifies the details of the model source.
    """

    def __init__(self, model_source=...) -> None: ...
    @classmethod
    def from_dict(cls, data):  # -> TFLiteFormat:
        """Create an instance of the object from a dict."""
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    @property
    def model_source(self):  # -> TFLiteModelSource | None:
        """The TF Lite model's location."""
        ...
    @model_source.setter
    def model_source(self, model_source): ...
    @property
    def size_bytes(self):  # -> None:
        """The size in bytes of the TF Lite model."""
        ...
    def as_dict(self, for_upload=...):  # -> dict[str, dict[Unknown, Unknown]]:
        """Returns a serializable representation of the object."""
        ...

class TFLiteModelSource:
    """Abstract base class representing a model source for TFLite format models."""

    def as_dict(self, for_upload=...):
        """Returns a serializable representation of the object."""
        ...

class _CloudStorageClient:
    """Cloud Storage helper class"""

    GCS_URI = ...
    BLOB_NAME = ...
    @staticmethod
    def upload(bucket_name, model_file_name, app):  # -> str:
        """Upload a model file to the specified Storage bucket."""
        ...
    @staticmethod
    def sign_uri(gcs_tflite_uri, app):
        """Makes the gcs_tflite_uri readable for GET for 10 minutes via signed_uri."""
        ...

class TFLiteGCSModelSource(TFLiteModelSource):
    """TFLite model source representing a tflite model file stored in GCS."""

    _STORAGE_CLIENT = ...
    def __init__(self, gcs_tflite_uri, app=...) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    @classmethod
    def from_tflite_model_file(
        cls, model_file_name, bucket_name=..., app=...
    ):  # -> TFLiteGCSModelSource:
        """Uploads the model file to an existing Google Cloud Storage bucket.

        Args:
            model_file_name: The name of the model file.
            bucket_name: The name of an existing bucket. None to use the default bucket configured
                in the app.
            app: A Firebase app instance (or None to use the default app).

        Returns:
            TFLiteGCSModelSource: The source created from the model_file

        Raises:
            ImportError: If the Cloud Storage Library has not been installed.
        """
        ...
    @classmethod
    def from_saved_model(
        cls, saved_model_dir, model_file_name=..., bucket_name=..., app=...
    ):  # -> TFLiteGCSModelSource:
        """Creates a Tensor Flow Lite model from the saved model, and uploads the model to GCS.

        Args:
            saved_model_dir: The saved model directory.
            model_file_name: The name that the tflite model will be saved as in Cloud Storage.
            bucket_name: The name of an existing bucket. None to use the default bucket configured
                in the app.
            app: Optional. A Firebase app instance (or None to use the default app)

        Returns:
            TFLiteGCSModelSource: The source created from the saved_model_dir

        Raises:
            ImportError: If the Tensor Flow or Cloud Storage Libraries have not been installed.
        """
        ...
    @classmethod
    def from_keras_model(
        cls, keras_model, model_file_name=..., bucket_name=..., app=...
    ):  # -> TFLiteGCSModelSource:
        """Creates a Tensor Flow Lite model from the keras model, and uploads the model to GCS.

        Args:
            keras_model: A tf.keras model.
            model_file_name: The name that the tflite model will be saved as in Cloud Storage.
            bucket_name: The name of an existing bucket. None to use the default bucket configured
                in the app.
            app: Optional. A Firebase app instance (or None to use the default app)

        Returns:
            TFLiteGCSModelSource: The source created from the keras_model

        Raises:
            ImportError: If the Tensor Flow or Cloud Storage Libraries have not been installed.
        """
        ...
    @property
    def gcs_tflite_uri(self):  # -> Unknown:
        """URI of the model file in Cloud Storage."""
        ...
    @gcs_tflite_uri.setter
    def gcs_tflite_uri(self, gcs_tflite_uri): ...
    def as_dict(self, for_upload=...):  # -> dict[str, Unknown]:
        """Returns a serializable representation of the object."""
        ...

class TFLiteAutoMlSource(TFLiteModelSource):
    """TFLite model source representing a tflite model created with AutoML."""

    def __init__(self, auto_ml_model, app=...) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    @property
    def auto_ml_model(self):
        """Resource name of the model, created by the AutoML API or Cloud console."""
        ...
    @auto_ml_model.setter
    def auto_ml_model(self, auto_ml_model): ...
    def as_dict(self, for_upload=...):  # -> dict[str, Unknown]:
        """Returns a serializable representation of the object."""
        ...

class ListModelsPage:
    """Represents a page of models in a Firebase project.

    Provides methods for traversing the models included in this page, as well as
    retrieving subsequent pages of models. The iterator returned by
    ``iterate_all()`` can be used to iterate through all the models in the
    Firebase project starting from this page.
    """

    def __init__(
        self, list_models_func, list_filter, page_size, page_token, app
    ) -> None: ...
    @property
    def models(self):  # -> list[Model]:
        """A list of Models from this page."""
        ...
    @property
    def list_filter(self):  # -> Unknown:
        """The filter string used to filter the models."""
        ...
    @property
    def next_page_token(self):
        """Token identifying the next page of results."""
        ...
    @property
    def has_next_page(self):  # -> bool:
        """True if more pages are available."""
        ...
    def get_next_page(self):  # -> ListModelsPage | None:
        """Retrieves the next page of models if available.

        Returns:
            ListModelsPage: Next page of models, or None if this is the last page.
        """
        ...
    def iterate_all(self):  # -> _ModelIterator:
        """Retrieves an iterator for Models.

        Returned iterator will iterate through all the models in the Firebase
        project starting from this page. The iterator will never buffer more than
        one page of models in memory at a time.

        Returns:
            iterator: An iterator of Model instances.
        """
        ...

class _ModelIterator:
    """An iterator that allows iterating over models, one at a time.

    This implementation loads a page of models into memory, and iterates on them.
    When the whole page has been traversed, it loads another page. This class
    never keeps more than one page of entries in memory.
    """

    def __init__(self, current_page) -> None: ...
    def next(self): ...
    def __next__(self): ...
    def __iter__(self): ...

class _MLService:
    """Firebase ML service."""

    PROJECT_URL = ...
    OPERATION_URL = ...
    POLL_EXPONENTIAL_BACKOFF_FACTOR = ...
    POLL_BASE_WAIT_TIME_SECONDS = ...
    def __init__(self, app) -> None: ...
    def get_operation(self, op_name): ...
    def handle_operation(
        self, operation, wait_for_operation=..., max_time_seconds=...
    ):  # -> dict[Unknown, Unknown] | None:
        """Handles long running operations.

        Args:
            operation: The operation to handle.
            wait_for_operation: Should we allow polling for the operation to complete.
                If no polling is requested, a locked model will be returned instead.
            max_time_seconds: The maximum seconds to try polling for operation complete.
                (None for no limit)

        Returns:
            dict: A dictionary of the returned model properties.

        Raises:
            TypeError: if the operation is not a dictionary.
            ValueError: If the operation is malformed.
            UnknownError: If the server responds with an unexpected response.
            err: If the operation exceeds polling attempts or stop_time
        """
        ...
    def create_model(self, model): ...
    def update_model(self, model, update_mask=...): ...
    def set_published(self, model_id, publish): ...
    def get_model(self, model_id): ...
    def list_models(self, list_filter, page_size, page_token):
        """lists Firebase ML models."""
        ...
    def delete_model(self, model_id): ...
