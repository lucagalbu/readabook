"""
This type stub file was generated by pyright.
"""

"""Firebase Project Management module.

This module enables management of resources in Firebase projects, such as Android and iOS apps.
"""
_PROJECT_MANAGEMENT_ATTRIBUTE = ...

def android_app(app_id, app=...):  # -> AndroidApp:
    """Obtains a reference to an Android app in the associated Firebase project.

    Args:
        app_id: The app ID that identifies this Android app.
        app: An App instance (optional).

    Returns:
        AndroidApp: An ``AndroidApp`` instance.
    """
    ...

def ios_app(app_id, app=...):  # -> IOSApp:
    """Obtains a reference to an iOS app in the associated Firebase project.

    Args:
        app_id: The app ID that identifies this iOS app.
        app: An App instance (optional).

    Returns:
        IOSApp: An ``IOSApp`` instance.
    """
    ...

def list_android_apps(app=...):
    """Lists all Android apps in the associated Firebase project.

    Args:
        app: An App instance (optional).

    Returns:
        list: a list of ``AndroidApp`` instances referring to each Android app in the Firebase
        project.
    """
    ...

def list_ios_apps(app=...):
    """Lists all iOS apps in the associated Firebase project.

    Args:
        app: An App instance (optional).

    Returns:
        list: a list of ``IOSApp`` instances referring to each iOS app in the Firebase project.
    """
    ...

def create_android_app(package_name, display_name=..., app=...):
    """Creates a new Android app in the associated Firebase project.

    Args:
        package_name: The package name of the Android app to be created.
        display_name: A nickname for this Android app (optional).
        app: An App instance (optional).

    Returns:
        AndroidApp: An ``AndroidApp`` instance that is a reference to the newly created app.
    """
    ...

def create_ios_app(bundle_id, display_name=..., app=...):
    """Creates a new iOS app in the associated Firebase project.

    Args:
        bundle_id: The bundle ID of the iOS app to be created.
        display_name: A nickname for this iOS app (optional).
        app: An App instance (optional).

    Returns:
        IOSApp: An ``IOSApp`` instance that is a reference to the newly created app.
    """
    ...

class AndroidApp:
    """A reference to an Android app within a Firebase project.

    Note: Unless otherwise specified, all methods defined in this class make an RPC.

    Please use the module-level function ``android_app(app_id)`` to obtain instances of this class
    instead of instantiating it directly.
    """

    def __init__(self, app_id, service) -> None: ...
    @property
    def app_id(self):  # -> Unknown:
        """Returns the app ID of the Android app to which this instance refers.

        Note: This method does not make an RPC.

        Returns:
            string: The app ID of the Android app to which this instance refers.
        """
        ...
    def get_metadata(self):
        """Retrieves detailed information about this Android app.

        Returns:
            AndroidAppMetadata: An ``AndroidAppMetadata`` instance.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service.
        """
        ...
    def set_display_name(self, new_display_name):
        """Updates the display name attribute of this Android app to the one given.

        Args:
            new_display_name: The new display name for this Android app.

        Returns:
            NoneType: None.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service.
        """
        ...
    def get_config(self):
        """Retrieves the configuration artifact associated with this Android app."""
        ...
    def get_sha_certificates(self):
        """Retrieves the entire list of SHA certificates associated with this Android app.

        Returns:
            list: A list of ``SHACertificate`` instances.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service.
        """
        ...
    def add_sha_certificate(self, certificate_to_add):
        """Adds a SHA certificate to this Android app.

        Args:
            certificate_to_add: The SHA certificate to add.

        Returns:
            NoneType: None.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service. (For example, if the certificate_to_add already exists.)
        """
        ...
    def delete_sha_certificate(self, certificate_to_delete):
        """Removes a SHA certificate from this Android app.

        Args:
            certificate_to_delete: The SHA certificate to delete.

        Returns:
            NoneType: None.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service. (For example, if the certificate_to_delete is not found.)
        """
        ...

class IOSApp:
    """A reference to an iOS app within a Firebase project.

    Note: Unless otherwise specified, all methods defined in this class make an RPC.

    Please use the module-level function ``ios_app(app_id)`` to obtain instances of this class
    instead of instantiating it directly.
    """

    def __init__(self, app_id, service) -> None: ...
    @property
    def app_id(self):  # -> Unknown:
        """Returns the app ID of the iOS app to which this instance refers.

        Note: This method does not make an RPC.

        Returns:
            string: The app ID of the iOS app to which this instance refers.
        """
        ...
    def get_metadata(self):
        """Retrieves detailed information about this iOS app.

        Returns:
            IOSAppMetadata: An ``IOSAppMetadata`` instance.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service.
        """
        ...
    def set_display_name(self, new_display_name):
        """Updates the display name attribute of this iOS app to the one given.

        Args:
            new_display_name: The new display name for this iOS app.

        Returns:
            NoneType: None.

        Raises:
            FirebaseError: If an error occurs while communicating with the Firebase Project
                Management Service.
        """
        ...
    def get_config(self):
        """Retrieves the configuration artifact associated with this iOS app."""
        ...

class _AppMetadata:
    """Detailed information about a Firebase Android or iOS app."""

    def __init__(self, name, app_id, display_name, project_id) -> None: ...
    @property
    def app_id(self):  # -> str:
        """The globally unique, Firebase-assigned identifier of this Android or iOS app.

        This ID is unique even across apps of different platforms.
        """
        ...
    @property
    def display_name(self):  # -> str:
        """The user-assigned display name of this Android or iOS app.

        Note that the display name can be None if it has never been set by the user."""
        ...
    @property
    def project_id(self):  # -> str:
        """The permanent, globally unique, user-assigned ID of the parent Firebase project."""
        ...
    def __eq__(self, other) -> bool: ...

class AndroidAppMetadata(_AppMetadata):
    """Android-specific information about an Android Firebase app."""

    def __init__(self, package_name, name, app_id, display_name, project_id) -> None:
        """Clients should not instantiate this class directly."""
        ...
    @property
    def package_name(self):  # -> str:
        """The canonical package name of this Android app as it would appear in the Play Store."""
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

class IOSAppMetadata(_AppMetadata):
    """iOS-specific information about an iOS Firebase app."""

    def __init__(self, bundle_id, name, app_id, display_name, project_id) -> None:
        """Clients should not instantiate this class directly."""
        ...
    @property
    def bundle_id(self):  # -> str:
        """The canonical bundle ID of this iOS app as it would appear in the iOS AppStore."""
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

class SHACertificate:
    """Represents a SHA-1 or SHA-256 certificate associated with an Android app."""

    SHA_1 = ...
    SHA_256 = ...
    _SHA_1_RE = ...
    _SHA_256_RE = ...
    def __init__(self, sha_hash, name=...) -> None:
        """Creates a new SHACertificate instance.

        Args:
            sha_hash: A string; the certificate hash for the Android app.
            name: The fully qualified resource name of this certificate; note that this field should
                be omitted if the instance is being constructed for the purpose of calling the
                add_sha_certificate() method on an ``AndroidApp``.

        Raises:
            ValueError: If the sha_hash is not a valid SHA-1 or SHA-256 certificate hash.
        """
        ...
    @property
    def name(self):
        """Returns the fully qualified resource name of this certificate, if known.

        Returns:
            string: The fully qualified resource name of this certificate, if known; otherwise, the
            empty string.
        """
        ...
    @property
    def sha_hash(self):
        """Returns the certificate hash.

        Returns:
            string: The certificate hash.
        """
        ...
    @property
    def cert_type(self):  # -> str:
        """Returns the type of the SHA certificate encoded in the hash.

        Returns:
            string: One of 'SHA_1' or 'SHA_256'.
        """
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

class _ProjectManagementService:
    """Provides methods for interacting with the Firebase Project Management Service."""

    BASE_URL = ...
    MAXIMUM_LIST_APPS_PAGE_SIZE = ...
    MAXIMUM_POLLING_ATTEMPTS = ...
    POLL_BASE_WAIT_TIME_SECONDS = ...
    POLL_EXPONENTIAL_BACKOFF_FACTOR = ...
    ANDROID_APPS_RESOURCE_NAME = ...
    ANDROID_APP_IDENTIFIER_NAME = ...
    IOS_APPS_RESOURCE_NAME = ...
    IOS_APP_IDENTIFIER_NAME = ...
    def __init__(self, app) -> None: ...
    def get_android_app_metadata(self, app_id): ...
    def get_ios_app_metadata(self, app_id): ...
    def set_android_app_display_name(self, app_id, new_display_name): ...
    def set_ios_app_display_name(self, app_id, new_display_name): ...
    def list_android_apps(self): ...
    def list_ios_apps(self): ...
    def create_android_app(self, package_name, display_name=...): ...
    def create_ios_app(self, bundle_id, display_name=...): ...
    def get_android_app_config(self, app_id): ...
    def get_ios_app_config(self, app_id): ...
    def get_sha_certificates(self, app_id): ...
    def add_sha_certificate(self, app_id, certificate_to_add): ...
    def delete_sha_certificate(self, certificate_to_delete): ...
